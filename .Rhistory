for(epoch in 1:epochs){
total_error <- 0
for(i in 1:ncol(x)){
# forward propagation
z1 <- x[,i] %*% w1 + b1
a1 <- relu(z1)
z2 <- a1 %*% w2 + b2
a2 <- sigmoid(z2)
z3 <- a2 %*% w3 + b3
a3 <- relu(z3)
z4 <- a3 %*% w4 + b4
a4 <- softmax(z4)
# backpropagation
error <- y[[i]] - a4
total_error <- total_error + abs(round(error))
a4_delta <- error * softmax_prime_slow(a4)
a3_delta <- (a4_delta %*% t(w4)) * relu_prime(a3)
a2_delta <- (a3_delta %*% t(w3)) * sigmoid_prime(a2)
a1_delta <- (a2_delta %*% t(w2)) * relu_prime(a1)
# update weights and biases
w4 <- w4 + lr * t(a3) %*% a4_delta
br <- b4 + lr * a4_delta
w3 <- w3 + lr * t(a2) %*% a3_delta
b3 <- b3 + lr * a3_delta
w2 <- w2 + lr * t(a1) %*% a2_delta
b2 <- b2 + lr * a2_delta
w1 <- w1 + lr * x[,i] %*% a1_delta
b1 <- b1 + lr * a1_delta
}
accuracy <- round((1 - total_error / ncol(x)) * 100, 2)
cat(paste0("epoch: ", epoch, ", classification accuracy: ", accuracy, "%\n"))
}
list(w1 = w1, b1 = b1, w2 = w2, b2 = b2, w3 = w3, b3 = b3, w4 = w4, b4 = b4)
}
set.seed(123)
models <- lapply(0:9, function(digit){
multilayer_perceptron(x, as.numeric(y == digit), h1 = 256, h2 = 128, h3 = 64,  lr = 0.001, epochs = 30)
})
sigmoid <- function(x){ 1 / (1 + exp(-x))}
sigmoid_prime <- function(x) x * (1 - x)
relu <- function(x){
x[x < 0] <- 0
x
}
relu_prime <- function(x){x > 0}
multilayer_perceptron <- function(x, y, epochs, lr, h1, h2, h3){
# weight and bias initialization (Glorot initialization)
w1 <- matrix(runif(nrow(x) * h1, min = -sqrt(6 / (nrow(x) + h1)), max = sqrt(6 / (nrow(x) + h1))), nrow(x), h1)
b1 <- rnorm(h1, sd = 0.1)
w2 <- matrix(runif(h1 * h2, min = -sqrt(6 / (h1 + h2)), max = sqrt(6 / (h1 + h2))), h1, h2)
b2 <- rnorm(h2, sd = 0.1)
w3 <- matrix(runif(h2 * 1, min = -sqrt(6 / (h2 + h3)), max = sqrt(6 / (h2 + h3))), h2, h3)
b3 <- rnorm(1, sd = 0.1)
w4 <- matrix(runif(h3 * 1, min = -sqrt(6 / (h3 + 1)), max = sqrt(6 / (h3 + 1))), h3, 1)
b4 <- rnorm(h4, sd = 0.1)
for(epoch in 1:epochs){
total_error <- 0
for(i in 1:ncol(x)){
# forward propagation
z1 <- x[,i] %*% w1 + b1
a1 <- relu(z1)
z2 <- a1 %*% w2 + b2
a2 <- sigmoid(z2)
z3 <- a2 %*% w3 + b3
a3 <- relu(z3)
z4 <- a3 %*% w4 + b4
a4 <- softmax(z4)
# backpropagation
error <- y[[i]] - a4
total_error <- total_error + abs(round(error))
a4_delta <- error * softmax_prime_slow(a4)
a3_delta <- (a4_delta %*% t(w4)) * relu_prime(a3)
a2_delta <- (a3_delta %*% t(w3)) * sigmoid_prime(a2)
a1_delta <- (a2_delta %*% t(w2)) * relu_prime(a1)
# update weights and biases
w4 <- w4 + lr * t(a3) %*% a4_delta
br <- b4 + lr * a4_delta
w3 <- w3 + lr * t(a2) %*% a3_delta
b3 <- b3 + lr * a3_delta
w2 <- w2 + lr * t(a1) %*% a2_delta
b2 <- b2 + lr * a2_delta
w1 <- w1 + lr * x[,i] %*% a1_delta
b1 <- b1 + lr * a1_delta
}
accuracy <- round((1 - total_error / ncol(x)) * 100, 2)
cat(paste0("epoch: ", epoch, ", classification accuracy: ", accuracy, "%\n"))
}
list(w1 = w1, b1 = b1, w2 = w2, b2 = b2, w3 = w3, b3 = b3, w4 = w4, b4 = b4)
}
set.seed(123)
models <- lapply(0:9, function(digit){
multilayer_perceptron(x, as.numeric(y == digit), h1 = 256, h2 = 128, h3 = 64,  lr = 0.001, epochs = 30)
})
sigmoid <- function(x){ 1 / (1 + exp(-x))}
sigmoid_prime <- function(x) x * (1 - x)
relu <- function(x){
x[x < 0] <- 0
x
}
relu_prime <- function(x){x > 0}
multilayer_perceptron <- function(x, y, epochs, lr, h1, h2, h3){
# weight and bias initialization (Glorot initialization)
w1 <- matrix(runif(nrow(x) * h1, min = -sqrt(6 / (nrow(x) + h1)), max = sqrt(6 / (nrow(x) + h1))), nrow(x), h1)
b1 <- rnorm(h1, sd = 0.1)
w2 <- matrix(runif(h1 * h2, min = -sqrt(6 / (h1 + h2)), max = sqrt(6 / (h1 + h2))), h1, h2)
b2 <- rnorm(h2, sd = 0.1)
w3 <- matrix(runif(h2 * 1, min = -sqrt(6 / (h2 + h3)), max = sqrt(6 / (h2 + h3))), h2, h3)
b3 <- rnorm(1, sd = 0.1)
w4 <- matrix(runif(h3 * 1, min = -sqrt(6 / (h3 + 1)), max = sqrt(6 / (h3 + 1))), h3, 1)
b4 <- rnorm(1, sd = 0.1)
for(epoch in 1:epochs){
total_error <- 0
for(i in 1:ncol(x)){
# forward propagation
z1 <- x[,i] %*% w1 + b1
a1 <- relu(z1)
z2 <- a1 %*% w2 + b2
a2 <- sigmoid(z2)
z3 <- a2 %*% w3 + b3
a3 <- relu(z3)
z4 <- a3 %*% w4 + b4
a4 <- softmax(z4)
# backpropagation
error <- y[[i]] - a4
total_error <- total_error + abs(round(error))
a4_delta <- error * softmax_prime_slow(a4)
a3_delta <- (a4_delta %*% t(w4)) * relu_prime(a3)
a2_delta <- (a3_delta %*% t(w3)) * sigmoid_prime(a2)
a1_delta <- (a2_delta %*% t(w2)) * relu_prime(a1)
# update weights and biases
w4 <- w4 + lr * t(a3) %*% a4_delta
br <- b4 + lr * a4_delta
w3 <- w3 + lr * t(a2) %*% a3_delta
b3 <- b3 + lr * a3_delta
w2 <- w2 + lr * t(a1) %*% a2_delta
b2 <- b2 + lr * a2_delta
w1 <- w1 + lr * x[,i] %*% a1_delta
b1 <- b1 + lr * a1_delta
}
accuracy <- round((1 - total_error / ncol(x)) * 100, 2)
cat(paste0("epoch: ", epoch, ", classification accuracy: ", accuracy, "%\n"))
}
list(w1 = w1, b1 = b1, w2 = w2, b2 = b2, w3 = w3, b3 = b3, w4 = w4, b4 = b4)
}
set.seed(123)
models <- lapply(0:9, function(digit){
multilayer_perceptron(x, as.numeric(y == digit), h1 = 256, h2 = 128, h3 = 64,  lr = 0.001, epochs = 30)
})
set.seed(123)
models <- lapply(0:9, function(digit){
multilayer_perceptron(x, as.numeric(y == digit), h1 = 16, h2 = 8, h3 = 4,  lr = 0.001, epochs = 30)
})
predict_mlp <- function(models, x_test){
pred <- matrix(0, length(models), ncol(x_test))
for(i in 1:ncol(x_test)){
for(j in 1:10){
z1 <- x[,i] %*% models[[j]]$w1 + models[[j]]$b1
a1 <- relu(z1)
z2 <- a1 %*% models[[j]]$w2 + models[[j]]$b2
a2 <- sigmoid(z2)
z3 <- a3 %*% models[[j]]$w3 + models[[j]]$b3
pred[j, i] <- relu(z3)
z4 <- a4 %*% models[[j]]$w3 + models[[j]]$b4
pred[j, i] <- softmax(z3)
}
}
pred
}
pred_test <- apply(predict_mlp(models, x_test), 2, function(y) which.max(y) - 1)
pred_test <- apply(predict_mlp(models, x_test), 2, function(y) which.max(y) - 1)
# Make predictions using softmax models
predict_softmax_mlp <- function(models, x_test) {
pred <- matrix(0, length(models), ncol(x_test))
for (i in 1:ncol(x_test)) {
for (j in 1:10) {
z1 <- x_test[, i] %*% models[[j]]$w1 + models[[j]]$b1
a1 <- relu(z1)
z2 <- a1 %*% models[[j]]$w2 + models[[j]]$b2
a2 <- sigmoid(z2)
z3 <- a2 %*% models[[j]]$w3 + models[[j]]$b3
pred[j, i] <- softmax(z3)
}
}
pred
}
pred_test <- apply(predict_mlp(models, x_test), 2, function(y) which.max(y) - 1)
# Make predictions using softmax models
predict_softmax_mlp <- function(models, x_test) {
pred <- matrix(0, length(models), ncol(x_test))
for (i in 1:ncol(x_test)) {
for (j in 1:10) {
z1 <- x_test[, i] %*% models[[j]]$w1 + models[[j]]$b1
a1 <- relu(z1)
z2 <- a1 %*% models[[j]]$w2 + models[[j]]$b2
a2 <- sigmoid(z2)
z3 <- a2 %*% models[[j]]$w3 + models[[j]]$b3
a3 <- relu(z3)
pred[j, i] <- softmax(z4)
}
}
pred
}
pred_test <- apply(predict_mlp(models, x_test), 2, function(y) which.max(y) - 1)
# Make predictions using softmax models
predict_softmax_mlp <- function(models, x_test) {
pred <- matrix(0, length(models), ncol(x_test))
for (i in 1:ncol(x_test)) {
for (j in 1:10) {
z1 <- x_test[, i] %*% models[[j]]$w1 + models[[j]]$b1
a1 <- relu(z1)
z2 <- a1 %*% models[[j]]$w2 + models[[j]]$b2
a2 <- sigmoid(z2)
z3 <- a2 %*% models[[j]]$w3 + models[[j]]$b3
a3 <- relu(z3)
pred[j, i] <- softmax(z4)
}
}
pred
}
pred_test <- apply(predict_mlp(models, x_test), 2, function(y) which.max(y) - 1)
# Make predictions using softmax models
predict_softmax_mlp <- function(models, x_test) {
pred <- matrix(0, length(models), ncol(x_test))
for (i in 1:ncol(x_test)) {
for (j in 1:10) {
z1 <- x_test[, i] %*% models[[j]]$w1 + models[[j]]$b1
a1 <- relu(z1)
z2 <- a1 %*% models[[j]]$w2 + models[[j]]$b2
a2 <- sigmoid(z2)
z3 <- a2 %*% models[[j]]$w3 + models[[j]]$b3
a3 <- relu(z3)
pred[j, i] <- softmax(a3)
}
}
pred
}
pred_test <- apply(predict_mlp(models, x_test), 2, function(y) which.max(y) - 1)
library(readr)
TestingOfNN <- read_csv("TestingOfNN.csv")
View(TestingOfNN)
ggplot2:: ggplot2(data = TestingOfNN, aes(x = "Activation function 1", y = accuracy)) +
geom_bar()
ggplot2:: ggplot(data = TestingOfNN, aes(x = "Activation function 1", y = accuracy)) +
geom_bar()
library(ggplot2)
ggplot2:: ggplot(data = TestingOfNN, aes(x = "Activation function 1", y = accuracy)) +
geom_bar()
ggplot2::ggplot(data = TestingOfNN, aes(x = "Activation function 1", y = accuracy)) +
geom_bar()
ggplot2::ggplot(data = TestingOfNN, aes(x = "Activation function 1", y = "Accuracy")) +
geom_bar()
ggplot2::ggplot(data = TestingOfNN, aes(x = "Activation function 1", y = "Accuracy")) +
geom_col()
TestingOfNN %>%
group_by(TestingOfNN$`Activation function 1`) %>%
ggplot2::ggplot(data = TestingOfNN, aes(x = "Activation function 1", y = "Accuracy")) +
geom_col()
library(tidyr)
library(dplyr)
TestingOfNN %>%
group_by(TestingOfNN$`Activation function 1`) %>%
ggplot2::ggplot(data = TestingOfNN, aes(x = "Activation function 1", y = "Accuracy")) +
geom_col()
activationFN1 <- TestingOfNN %>%
group_by(TestingOfNN$`Activation function 1`) %>%
ggplot2::ggplot(data = activationFN1, aes(x = "Activation function 1", y = "Accuracy")) +
geom_col()
activationFN1 <- TestingOfNN %>%
group_by(TestingOfNN$`Activation function 1`)
ggplot2::ggplot(data = activationFN1, aes(x = "Activation function 1", y = "Accuracy")) +
geom_col()
View(activationFN1)
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`)
ggplot2::ggplot(data = TestingOfNN, aes(x = "Activation function 1", y = "Accuracy", group = 'Activation function 1')) +
geom_col()
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`)
ggplot2::ggplot(data = TestingOfNN, aes(x = "Activation function 1", y = "Accuracy", group = "Activation function 1")) +
geom_col()
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`)
ggplot2::ggplot(data = TestingOfNN, aes(x = "Activation function 1", y = "Accuracy", group = "Activation function 1")) +
geom_bar(stat = "identity")
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`)
ggplot2::ggplot(data = TestingOfNN, aes(x = as.factor("Activation function 1"), y = "Accuracy", group = "Activation function 1")) +
geom_bar(stat = "identity")
library(readr)
TestingOfNN <- as.matrix(read_csv("TestingOfNN.csv"))
View(TestingOfNN)
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`)
ggplot2::ggplot(data = TestingOfNN, aes(x = as.factor("Activation function 1"), y = "Accuracy", group = "Activation function 1")) +
geom_bar(stat = "identity")
library(readr)
TestingOfNN <- as.data.frame(read_csv("TestingOfNN.csv"))
View(TestingOfNN)
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`)
ggplot2::ggplot(data = TestingOfNN, aes(x = as.factor("Activation function 1"), y = "Accuracy", group = "Activation function 1")) +
geom_bar(stat = "identity")
library(readr)
TestingOfNN <- as.data.frame(read_csv("TestingOfNN.csv"))
View(TestingOfNN)
library(readr)
TestingOfNN <- as.data.frame(read_csv("TestingOfNN.csv", show_col_types = FALSE))
View(TestingOfNN)
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`)
ggplot2::ggplot(data = TestingOfNN, aes(x = as.factor("Activation function 1"), y = "Accuracy", group = "Activation function 1")) +
geom_bar(stat = "identity")
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`)
ggplot2::ggplot(data = TestingOfNN, aes(x = as.factor(TestingOfNN$`Activation function 1`), y = "Accuracy", group = TestingOfNN$`Activation function 1`)) +
geom_bar(stat = "identity")
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`)
ggplot2::ggplot(data = TestingOfNN, aes(x = as.factor(`Activation function 1`), y = "Accuracy", group = TestingOfNN$`Activation function 1`)) +
geom_bar(stat = "identity")
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`)
ggplot2::ggplot(data = TestingOfNN, aes(x = as.factor(`Activation function 1`), y = `Accuracy`)) +
geom_bar(stat = "identity")
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`)
ggplot2::ggplot(data = TestingOfNN, aes(x = as.factor(`Activation function 1`), y = `Accuracy`)) +
geom_bar()
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`)
ggplot2::ggplot(data = TestingOfNN, aes(x = as.factor(`Activation function 1`), y = `Accuracy`)) +
geom_col()
?geom_bar()
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`) %>%
ggplot2::ggplot(data = TestingOfNN, aes(x = as.factor(`Activation function 1`), y = `Accuracy`, group = `Activation function 1`)) +
geom_bar(stat = "Identity")
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`) %>%
#ggplot2::ggplot(data = TestingOfNN, aes(x = as.factor(`Activation function 1`), y = `Accuracy`, group = `Activation function 1`)) +
#geom_bar(stat = "Identity")
View(TestingOfNN)
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`) %>%
ggplot2::ggplot(data = TestingOfNN, aes(x = as.factor(`Activation function 1`), y = `Accuracy`, fill = `Activation function 1`)) +
geom_bar(stat = "Identity")
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`) %>%
ggplot2::ggplot(data = TestingOfNN, aes(x = `Activation function 1`, y = `Accuracy`, fill = `Activation function 1`)) +
geom_bar(stat = "Identity")
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`) %>%
ggplot2::ggplot(data = TestingOfNN, aes(x = `Activation function 1`, y = `Accuracy`, fill = `Activation function 1`)) +
geom_bar(stat = "Identity", position = "dodge")
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`) %>%
ggplot2::ggplot(data = TestingOfNN, aes(x = `Activation function 1`, y = `Accuracy`, fill = `Activation function 1`)) +
geom_bar(stat = "Identity", position = "dodge") +
ylim(95, 100)
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`) %>%
ggplot2::ggplot(data = TestingOfNN, aes(x = `Activation function 1`, y = `Accuracy`, fill = `Activation function 1`)) +
geom_bar(stat = "Identity", position = "dodge") +
ylim(90, 100)
?ylim()
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`) %>%
ggplot2::ggplot(data = TestingOfNN, aes(x = `Activation function 1`, y = `Accuracy`, fill = `Activation function 1`)) +
geom_bar(stat = "Identity", position = "dodge") +
ylim(c(90, 100))
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`) %>%
ggplot2::ggplot(data = TestingOfNN, aes(x = `Activation function 1`, y = `Accuracy`, fill = `Activation function 1`)) +
geom_bar(stat = "Identity", position = "dodge") +
ylim = c(90, 100)
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`) %>%
ggplot2::ggplot(data = TestingOfNN, aes(x = `Activation function 1`, y = `Accuracy`, fill = `Activation function 1`)) +
geom_bar(stat = "Identity", position = "dodge") +
scale_y_continuous(name = "Accuracy", limits = c(95,100))
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`) %>%
ggplot2::ggplot(data = TestingOfNN, aes(x = `Activation function 1`, y = `Accuracy`, fill = `Activation function 1`)) +
geom_bar(stat = "Identity", position = "dodge") +
scale_y_continuous(name = 'Accuracy', limits = c(95,100))
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`) %>%
ggplot2::ggplot(data = TestingOfNN, aes(x = `Activation function 1`, y = `Accuracy`, fill = `Activation function 1`)) +
geom_col(stat = "Identity", position = "dodge") +
scale_y_continuous(name = 'Accuracy', limits = c(95,100))
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`) %>%
#ggplot2::ggplot(data = TestingOfNN, aes(x = `Activation function 1`, y = `Accuracy`, fill = `Activation function 1`)) +
#geom_col(stat = "Identity", position = "dodge") +
#scale_y_continuous(name = 'Accuracy', limits = c(95,100))
desc(TestingOfNN)
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`) %>%
#ggplot2::ggplot(data = TestingOfNN, aes(x = `Activation function 1`, y = `Accuracy`, fill = `Activation function 1`)) +
#geom_col(stat = "Identity", position = "dodge") +
#scale_y_continuous(name = 'Accuracy', limits = c(95,100))
TestingOfNN %>%
desc('Accuracy')
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`) %>%
#ggplot2::ggplot(data = TestingOfNN, aes(x = `Activation function 1`, y = `Accuracy`, fill = `Activation function 1`)) +
#geom_col(stat = "Identity", position = "dodge") +
#scale_y_continuous(name = 'Accuracy', limits = c(95,100))
TestingOfNN %>%
desc(TestingOfNN$Accuracy)
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`) %>%
#ggplot2::ggplot(data = TestingOfNN, aes(x = `Activation function 1`, y = `Accuracy`, fill = `Activation function 1`)) +
#geom_col(stat = "Identity", position = "dodge") +
#scale_y_continuous(name = 'Accuracy', limits = c(95,100))
TestingOfNN %>%
order(TestingOfNN$Accuracy)
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`) %>%
#ggplot2::ggplot(data = TestingOfNN, aes(x = `Activation function 1`, y = `Accuracy`, fill = `Activation function 1`)) +
#geom_col(stat = "Identity", position = "dodge") +
#scale_y_continuous(name = 'Accuracy', limits = c(95,100))
print(TestingOfNN)
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`) %>%
#ggplot2::ggplot(data = TestingOfNN, aes(x = `Activation function 1`, y = `Accuracy`, fill = `Activation function 1`)) +
#geom_col(stat = "Identity", position = "dodge") +
#scale_y_continuous(name = 'Accuracy', limits = c(95,100))
print(TestingOfNN)
TestingOfNN[order(Accuracy),]
#activationFN1 <- TestingOfNN %>%
#group_by(TestingOfNN$`Activation function 1`) %>%
#ggplot2::ggplot(data = TestingOfNN, aes(x = `Activation function 1`, y = `Accuracy`, fill = `Activation function 1`)) +
#geom_col(stat = "Identity", position = "dodge") +
#scale_y_continuous(name = 'Accuracy', limits = c(95,100))
print(TestingOfNN)
TestingOfNN[order(TestingOfNN$Accuracy),]
x <- as.matrix(read.csv("mnist_train.csv"))
y <- as.vector(read.csv("mnist_train_targets.csv")$x)
x_test <- as.matrix(read.csv("mnist_test.csv"))
#y_train <- to_categorical(y_train, 10)
#y_test <- to_categorical(y_test, 10)
y <- to_categorical(y, 10)
model <- keras_model_sequential() %>%
layer_dense(units = 256, activation = "relu", input_shape = c(784)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 128, activation = "sigmoid") %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 10, activation = "softmax")
model %>% compile(
loss = "categorical_crossentropy",
optimizer = optimizer_adam(),
metrics = c("accuracy")
)
history <- model %>%
fit(x, y, epochs = 50, batch_size = 128, validation_split = 0.15)
library(tensorflow)
library(keras)
mnist <- dataset_mnist()
#x_train <- mnist$train$x
#y_train <- mnist$train$y
#x_test <- mnist$test$x
#y_test <- mnist$test$y
history <- model %>%
fit(x, y, epochs = 50, batch_size = 128, validation_split = 0.15)
x <- t(x)
x_test <- t(x_test)
x <- apply(x, 2, function(y) y / 255)
x_test <- apply(x_test, 2, function(y) y / 255)
history <- model %>%
fit(x, y, epochs = 50, batch_size = 128, validation_split = 0.15)
#y_train <- to_categorical(y_train, 10)
#y_test <- to_categorical(y_test, 10)
y <- to_categorical(y, 10)
history <- model %>%
fit(x, y, epochs = 50, batch_size = 128, validation_split = 0.15)
library(tensorflow)
library(keras)
mnist <- dataset_mnist()
#x_train <- mnist$train$x
#y_train <- mnist$train$y
#x_test <- mnist$test$x
#y_test <- mnist$test$y
x <- as.matrix(read.csv("mnist_train.csv"))
y <- as.vector(read.csv("mnist_train_targets.csv")$x)
x_test <- as.matrix(read.csv("mnist_test.csv"))
x <- t(x)
x_test <- t(x_test)
x <- apply(x, 2, function(y) y / 255)
x_test <- apply(x_test, 2, function(y) y / 255)
#y_train <- to_categorical(y_train, 10)
#y_test <- to_categorical(y_test, 10)
y <- to_categorical(y, 10)
model <- keras_model_sequential() %>%
layer_dense(units = 256, activation = "relu", input_shape = c(784)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 128, activation = "sigmoid") %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 10, activation = "softmax")
model %>% compile(
loss = "categorical_crossentropy",
optimizer = optimizer_adam(),
metrics = c("accuracy")
)
history <- model %>%
fit(x, y, epochs = 50, batch_size = 128, validation_split = 0.15)
print(history)
plot(history)
